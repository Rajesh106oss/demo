/*
 * This file is generated by jOOQ.
 */
package com.example.demo.model.tables;


import com.example.demo.model.Indexes;
import com.example.demo.model.Keys;
import com.example.demo.model.Public;
import com.example.demo.model.tables.records.LibraryBooksRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LibraryBooks extends TableImpl<LibraryBooksRecord> {

    private static final long serialVersionUID = 686622839;

    /**
     * The reference instance of <code>public.library_books</code>
     */
    public static final LibraryBooks LIBRARY_BOOKS = new LibraryBooks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LibraryBooksRecord> getRecordType() {
        return LibraryBooksRecord.class;
    }

    /**
     * The column <code>public.library_books.id</code>.
     */
    public final TableField<LibraryBooksRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('library_books_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.library_books.name</code>.
     */
    public final TableField<LibraryBooksRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.library_books.author_name</code>.
     */
    public final TableField<LibraryBooksRecord, String> AUTHOR_NAME = createField(DSL.name("author_name"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.library_books.library_id</code>.
     */
    public final TableField<LibraryBooksRecord, Integer> LIBRARY_ID = createField(DSL.name("library_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('library_books_library_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.library_books.released_at</code>.
     */
    public final TableField<LibraryBooksRecord, OffsetDateTime> RELEASED_AT = createField(DSL.name("released_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * Create a <code>public.library_books</code> table reference
     */
    public LibraryBooks() {
        this(DSL.name("library_books"), null);
    }

    /**
     * Create an aliased <code>public.library_books</code> table reference
     */
    public LibraryBooks(String alias) {
        this(DSL.name(alias), LIBRARY_BOOKS);
    }

    /**
     * Create an aliased <code>public.library_books</code> table reference
     */
    public LibraryBooks(Name alias) {
        this(alias, LIBRARY_BOOKS);
    }

    private LibraryBooks(Name alias, Table<LibraryBooksRecord> aliased) {
        this(alias, aliased, null);
    }

    private LibraryBooks(Name alias, Table<LibraryBooksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> LibraryBooks(Table<O> child, ForeignKey<O, LibraryBooksRecord> key) {
        super(child, key, LIBRARY_BOOKS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LIBRARY_ID);
    }

    @Override
    public Identity<LibraryBooksRecord, Integer> getIdentity() {
        return Keys.IDENTITY_LIBRARY_BOOKS;
    }

    @Override
    public UniqueKey<LibraryBooksRecord> getPrimaryKey() {
        return Keys.LIBRARY_ID;
    }

    @Override
    public List<UniqueKey<LibraryBooksRecord>> getKeys() {
        return Arrays.<UniqueKey<LibraryBooksRecord>>asList(Keys.LIBRARY_ID);
    }

    @Override
    public LibraryBooks as(String alias) {
        return new LibraryBooks(DSL.name(alias), this);
    }

    @Override
    public LibraryBooks as(Name alias) {
        return new LibraryBooks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LibraryBooks rename(String name) {
        return new LibraryBooks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LibraryBooks rename(Name name) {
        return new LibraryBooks(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, Integer, OffsetDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
