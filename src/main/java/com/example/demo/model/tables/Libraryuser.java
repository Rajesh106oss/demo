/*
 * This file is generated by jOOQ.
 */
package com.example.demo.model.tables;


import com.example.demo.model.Indexes;
import com.example.demo.model.Keys;
import com.example.demo.model.Public;
import com.example.demo.model.tables.records.LibraryuserRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Libraryuser extends TableImpl<LibraryuserRecord> {

    private static final long serialVersionUID = 121314059;

    /**
     * The reference instance of <code>public.LibraryUser</code>
     */
    public static final Libraryuser LIBRARYUSER = new Libraryuser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LibraryuserRecord> getRecordType() {
        return LibraryuserRecord.class;
    }

    /**
     * The column <code>public.LibraryUser.id</code>.
     */
    public final TableField<LibraryuserRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('\"LibraryUser_id_seq\"'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.LibraryUser.name</code>.
     */
    public final TableField<LibraryuserRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.LibraryUser.author</code>.
     */
    public final TableField<LibraryuserRecord, String> AUTHOR = createField(DSL.name("author"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.LibraryUser.published by</code>.
     */
    public final TableField<LibraryuserRecord, String> PUBLISHED_BY = createField(DSL.name("published by"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.LibraryUser.released at</code>.
     */
    public final TableField<LibraryuserRecord, OffsetDateTime> RELEASED_AT = createField(DSL.name("released at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>public.LibraryUser.price</code>.
     */
    public final TableField<LibraryuserRecord, Integer> PRICE = createField(DSL.name("price"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.LibraryUser.created at</code>.
     */
    public final TableField<LibraryuserRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * Create a <code>public.LibraryUser</code> table reference
     */
    public Libraryuser() {
        this(DSL.name("LibraryUser"), null);
    }

    /**
     * Create an aliased <code>public.LibraryUser</code> table reference
     */
    public Libraryuser(String alias) {
        this(DSL.name(alias), LIBRARYUSER);
    }

    /**
     * Create an aliased <code>public.LibraryUser</code> table reference
     */
    public Libraryuser(Name alias) {
        this(alias, LIBRARYUSER);
    }

    private Libraryuser(Name alias, Table<LibraryuserRecord> aliased) {
        this(alias, aliased, null);
    }

    private Libraryuser(Name alias, Table<LibraryuserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Libraryuser(Table<O> child, ForeignKey<O, LibraryuserRecord> key) {
        super(child, key, LIBRARYUSER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LIBRARYUSER_PKEY);
    }

    @Override
    public Identity<LibraryuserRecord, Integer> getIdentity() {
        return Keys.IDENTITY_LIBRARYUSER;
    }

    @Override
    public UniqueKey<LibraryuserRecord> getPrimaryKey() {
        return Keys.LIBRARYUSER_PKEY;
    }

    @Override
    public List<UniqueKey<LibraryuserRecord>> getKeys() {
        return Arrays.<UniqueKey<LibraryuserRecord>>asList(Keys.LIBRARYUSER_PKEY);
    }

    @Override
    public Libraryuser as(String alias) {
        return new Libraryuser(DSL.name(alias), this);
    }

    @Override
    public Libraryuser as(Name alias) {
        return new Libraryuser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Libraryuser rename(String name) {
        return new Libraryuser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Libraryuser rename(Name name) {
        return new Libraryuser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, OffsetDateTime, Integer, OffsetDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
