/*
 * This file is generated by jOOQ.
 */
package com.example.demo.model.tables.daos;


import com.example.demo.model.tables.Libraryuser;
import com.example.demo.model.tables.records.LibraryuserRecord;

import java.time.OffsetDateTime;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LibraryuserDao extends DAOImpl<LibraryuserRecord, com.example.demo.model.tables.pojos.Libraryuser, Integer> {

    /**
     * Create a new LibraryuserDao without any configuration
     */
    public LibraryuserDao() {
        super(Libraryuser.LIBRARYUSER, com.example.demo.model.tables.pojos.Libraryuser.class);
    }

    /**
     * Create a new LibraryuserDao with an attached configuration
     */
    public LibraryuserDao(Configuration configuration) {
        super(Libraryuser.LIBRARYUSER, com.example.demo.model.tables.pojos.Libraryuser.class, configuration);
    }

    @Override
    public Integer getId(com.example.demo.model.tables.pojos.Libraryuser object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.example.demo.model.tables.pojos.Libraryuser> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Libraryuser.LIBRARYUSER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.example.demo.model.tables.pojos.Libraryuser> fetchById(Integer... values) {
        return fetch(Libraryuser.LIBRARYUSER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.example.demo.model.tables.pojos.Libraryuser fetchOneById(Integer value) {
        return fetchOne(Libraryuser.LIBRARYUSER.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.example.demo.model.tables.pojos.Libraryuser> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Libraryuser.LIBRARYUSER.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.example.demo.model.tables.pojos.Libraryuser> fetchByName(String... values) {
        return fetch(Libraryuser.LIBRARYUSER.NAME, values);
    }

    /**
     * Fetch records that have <code>author BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.example.demo.model.tables.pojos.Libraryuser> fetchRangeOfAuthor(String lowerInclusive, String upperInclusive) {
        return fetchRange(Libraryuser.LIBRARYUSER.AUTHOR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>author IN (values)</code>
     */
    public List<com.example.demo.model.tables.pojos.Libraryuser> fetchByAuthor(String... values) {
        return fetch(Libraryuser.LIBRARYUSER.AUTHOR, values);
    }

    /**
     * Fetch records that have <code>published by BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.example.demo.model.tables.pojos.Libraryuser> fetchRangeOfPublishedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(Libraryuser.LIBRARYUSER.PUBLISHED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>published by IN (values)</code>
     */
    public List<com.example.demo.model.tables.pojos.Libraryuser> fetchByPublishedBy(String... values) {
        return fetch(Libraryuser.LIBRARYUSER.PUBLISHED_BY, values);
    }

    /**
     * Fetch records that have <code>released at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.example.demo.model.tables.pojos.Libraryuser> fetchRangeOfReleasedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(Libraryuser.LIBRARYUSER.RELEASED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>released at IN (values)</code>
     */
    public List<com.example.demo.model.tables.pojos.Libraryuser> fetchByReleasedAt(OffsetDateTime... values) {
        return fetch(Libraryuser.LIBRARYUSER.RELEASED_AT, values);
    }

    /**
     * Fetch records that have <code>price BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.example.demo.model.tables.pojos.Libraryuser> fetchRangeOfPrice(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Libraryuser.LIBRARYUSER.PRICE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>price IN (values)</code>
     */
    public List<com.example.demo.model.tables.pojos.Libraryuser> fetchByPrice(Integer... values) {
        return fetch(Libraryuser.LIBRARYUSER.PRICE, values);
    }

    /**
     * Fetch records that have <code>created at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.example.demo.model.tables.pojos.Libraryuser> fetchRangeOfCreatedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(Libraryuser.LIBRARYUSER.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created at IN (values)</code>
     */
    public List<com.example.demo.model.tables.pojos.Libraryuser> fetchByCreatedAt(OffsetDateTime... values) {
        return fetch(Libraryuser.LIBRARYUSER.CREATED_AT, values);
    }
}
