/*
 * This file is generated by jOOQ.
 */
package com.example.demo.model.tables.daos;


import com.example.demo.model.tables.LibraryBooks;
import com.example.demo.model.tables.records.LibraryBooksRecord;

import java.time.OffsetDateTime;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LibraryBooksDao extends DAOImpl<LibraryBooksRecord, com.example.demo.model.tables.pojos.LibraryBooks, Integer> {

    /**
     * Create a new LibraryBooksDao without any configuration
     */
    public LibraryBooksDao() {
        super(LibraryBooks.LIBRARY_BOOKS, com.example.demo.model.tables.pojos.LibraryBooks.class);
    }

    /**
     * Create a new LibraryBooksDao with an attached configuration
     */
    public LibraryBooksDao(Configuration configuration) {
        super(LibraryBooks.LIBRARY_BOOKS, com.example.demo.model.tables.pojos.LibraryBooks.class, configuration);
    }

    @Override
    public Integer getId(com.example.demo.model.tables.pojos.LibraryBooks object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.example.demo.model.tables.pojos.LibraryBooks> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(LibraryBooks.LIBRARY_BOOKS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.example.demo.model.tables.pojos.LibraryBooks> fetchById(Integer... values) {
        return fetch(LibraryBooks.LIBRARY_BOOKS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.example.demo.model.tables.pojos.LibraryBooks fetchOneById(Integer value) {
        return fetchOne(LibraryBooks.LIBRARY_BOOKS.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.example.demo.model.tables.pojos.LibraryBooks> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(LibraryBooks.LIBRARY_BOOKS.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.example.demo.model.tables.pojos.LibraryBooks> fetchByName(String... values) {
        return fetch(LibraryBooks.LIBRARY_BOOKS.NAME, values);
    }

    /**
     * Fetch records that have <code>author_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.example.demo.model.tables.pojos.LibraryBooks> fetchRangeOfAuthorName(String lowerInclusive, String upperInclusive) {
        return fetchRange(LibraryBooks.LIBRARY_BOOKS.AUTHOR_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>author_name IN (values)</code>
     */
    public List<com.example.demo.model.tables.pojos.LibraryBooks> fetchByAuthorName(String... values) {
        return fetch(LibraryBooks.LIBRARY_BOOKS.AUTHOR_NAME, values);
    }

    /**
     * Fetch records that have <code>library_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.example.demo.model.tables.pojos.LibraryBooks> fetchRangeOfLibraryId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(LibraryBooks.LIBRARY_BOOKS.LIBRARY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>library_id IN (values)</code>
     */
    public List<com.example.demo.model.tables.pojos.LibraryBooks> fetchByLibraryId(Integer... values) {
        return fetch(LibraryBooks.LIBRARY_BOOKS.LIBRARY_ID, values);
    }

    /**
     * Fetch records that have <code>released_at BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.example.demo.model.tables.pojos.LibraryBooks> fetchRangeOfReleasedAt(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(LibraryBooks.LIBRARY_BOOKS.RELEASED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>released_at IN (values)</code>
     */
    public List<com.example.demo.model.tables.pojos.LibraryBooks> fetchByReleasedAt(OffsetDateTime... values) {
        return fetch(LibraryBooks.LIBRARY_BOOKS.RELEASED_AT, values);
    }
}
